name: Publish NuGet Package

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
    paths:
      - 'ccfx.csproj'  # Triggers when csproj file changes
    branches:
      - main
      - master
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.0)'
        required: false
        type: string
      increment:
        description: 'Auto-increment version'
        required: false
        type: choice
        options:
          - ''
          - 'patch'
          - 'minor' 
          - 'major'

jobs:
  check-version-change:
    if: ${{ contains(github.event.head_commit.modified, 'ccfx.csproj') }}
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to compare
        
    - name: Check if version changed
      id: check
      run: |
        # Get current version
        CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' ccfx.csproj)
        
        # Get previous version
        git checkout HEAD~1
        PREVIOUS_VERSION=$(grep -oP '<Version>\K[^<]+' ccfx.csproj || echo "0.0.0")
        git checkout -
        
        echo "Previous version: $PREVIOUS_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "❌ No version change detected"
        fi

  publish:
    runs-on: ubuntu-latest
    needs: [check-version-change]
    if: ${{ always() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' || needs.check-version-change.outputs.version-changed == 'true') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Make publishNuget executable
      run: chmod +x publishNuget
      
    - name: Publish NuGet package (with version)
      if: ${{ github.event.inputs.version != '' }}
      run: ./publishNuget --version ${{ github.event.inputs.version }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish NuGet package (with increment)
      if: ${{ github.event.inputs.increment != '' }}
      run: ./publishNuget --increment ${{ github.event.inputs.increment }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish NuGet package (auto from tag)
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        ./publishNuget --version $VERSION
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish NuGet package (from csproj change)
      if: ${{ needs.check-version-change.outputs.version-changed == 'true' }}
      run: ./publishNuget --version ${{ needs.check-version-change.outputs.new-version }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Publish NuGet package (current version)
      if: ${{ github.event.inputs.version == '' && github.event.inputs.increment == '' && !startsWith(github.ref, 'refs/tags/v') && needs.check-version-change.outputs.version-changed != 'true' }}
      run: ./publishNuget
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Optional, Tuple


class nuGetPublisher:
    def __init__(self):
        self.projectPath = Path(".").resolve()
        self.csprojFile = self.projectPath / "ccfx.csproj"
        
        if not self.csprojFile.exists():
            raise FileNotFoundError(f"Could not find ccfx.csproj in {self.projectPath}")
    
    def getCurrentVersion(self) -> str:
        tree = ET.parse(self.csprojFile)
        root = tree.getroot()
        
        versionElement = root.find(".//Version")
        if versionElement is None:
            raise ValueError("Could not find Version element in ccfx.csproj")
        
        return versionElement.text or "0.1.0"
    
    def updateVersion(self, newVersion: str) -> None:
        tree = ET.parse(self.csprojFile)
        root = tree.getroot()
        
        versionElement = root.find(".//Version")
        if versionElement is None:
            raise ValueError("Could not find Version element in ccfx.csproj")
        
        versionElement.text = newVersion
        tree.write(self.csprojFile, encoding="utf-8", xml_declaration=True)
        print(f"✓ Updated version to {newVersion}")
    
    def runCommand(self, command: list, description: str) -> Tuple[bool, str]:
        print(f"🔄 {description}...")
        try:
            result = subprocess.run(
                command,
                cwd=self.projectPath,
                capture_output=True,
                text=True,
                check=True
            )
            print(f"✓ {description} completed successfully")
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            errorMsg = f"❌ {description} failed:\n{e.stderr}"
            print(errorMsg)
            return False, e.stderr
    
    def cleanProject(self) -> bool:
        success, _ = self.runCommand(
            ["dotnet", "clean"],
            "Cleaning project"
        )
        return success
    
    def restorePackages(self) -> bool:
        success, _ = self.runCommand(
            ["dotnet", "restore"],
            "Restoring NuGet packages"
        )
        return success
    
    def buildProject(self, configuration: str = "Release") -> bool:
        success, _ = self.runCommand(
            ["dotnet", "build", "--configuration", configuration, "--no-restore"],
            f"Building project in {configuration} mode"
        )
        return success
    
    def createPackage(self, configuration: str = "Release") -> bool:
        success, _ = self.runCommand(
            ["dotnet", "pack", "--configuration", configuration, "--no-build"],
            "Creating NuGet package"
        )
        return success
    
    def findPackageFile(self, version: str, configuration: str = "Release") -> Optional[Path]:
        packageDir = self.projectPath / "bin" / configuration
        packageFile = packageDir / f"ccfx.{version}.nupkg"
        
        if packageFile.exists():
            return packageFile
        
        # Try to find any .nupkg file if exact version doesn't match
        for nupkgFile in packageDir.glob("ccfx.*.nupkg"):
            return nupkgFile
        
        return None
    
    def publishPackage(self, apiKey: str, packageFile: Path, dryRun: bool = False) -> bool:
        if dryRun:
            print(f"🔍 DRY RUN: Would publish {packageFile} to nuget.org")
            return True
        
        command = [
            "dotnet", "nuget", "push",
            str(packageFile),
            "--api-key", apiKey,
            "--source", "https://api.nuget.org/v3/index.json"
        ]
        
        success, output = self.runCommand(command, "Publishing package to nuget.org")
        
        if success:
            print(f"🎉 Package published successfully!")
            print(f"Package URL: https://www.nuget.org/packages/ccfx/")
        
        return success
    
    def incrementVersion(self, version: str, incrementType: str = "patch") -> str:
        parts = version.split(".")
        if len(parts) != 3:
            raise ValueError(f"Invalid version format: {version}")
        
        major, minor, patch = map(int, parts)
        
        if incrementType == "major":
            major += 1
            minor = 0
            patch = 0
        elif incrementType == "minor":
            minor += 1
            patch = 0
        elif incrementType == "patch":
            patch += 1
        else:
            raise ValueError(f"Invalid increment type: {incrementType}")
        
        return f"{major}.{minor}.{patch}"
    
    def publish(self, apiKey: str, version: Optional[str] = None, 
                increment: Optional[str] = None, dryRun: bool = False) -> bool:
        print("🚀 Starting NuGet package publish process for ccfx")
        print(f"📁 Project path: {self.projectPath}")
        
        # Get or set version
        currentVersion = self.getCurrentVersion()
        print(f"📦 Current version: {currentVersion}")
        
        if version:
            targetVersion = version
            if targetVersion != currentVersion:
                self.updateVersion(targetVersion)
        elif increment:
            targetVersion = self.incrementVersion(currentVersion, increment)
            self.updateVersion(targetVersion)
        else:
            targetVersion = currentVersion
        
        print(f"🎯 Target version: {targetVersion}")
        
        # Build process
        steps = [
            ("clean", self.cleanProject),
            ("restore", self.restorePackages),
            ("build", self.buildProject),
            ("package", self.createPackage)
        ]
        
        for stepName, stepFunc in steps:
            if not stepFunc():
                print(f"❌ Build process failed at {stepName} step")
                return False
        
        # Find package file
        packageFile = self.findPackageFile(targetVersion)
        if not packageFile:
            print(f"❌ Could not find generated package file for version {targetVersion}")
            return False
        
        print(f"📦 Found package: {packageFile}")
        
        # Publish package
        return self.publishPackage(apiKey, packageFile, dryRun)


def main():
    parser = argparse.ArgumentParser()
    
    parser.add_argument(
        "--version",
        help="Specific version to publish (e.g., 1.2.0)"
    )
    
    parser.add_argument(
        "--increment",
        choices=["major", "minor", "patch"],
        help="Auto-increment version (major.minor.patch)"
    )
    
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Perform all steps except actual publishing"
    )
    
    args = parser.parse_args()
    
    # Get API key from environment variable
    apiKey = os.getenv("NUGET_API_KEY")
    if not apiKey and not args.dry_run:
        print("❌ Error: NUGET_API_KEY environment variable is required")
        print("Set it with: export NUGET_API_KEY=your_api_key_here")
        sys.exit(1)
    
    # Validate arguments
    if args.version and args.increment:
        print("❌ Error: Cannot specify both --version and --increment")
        sys.exit(1)
    
    try:
        publisher = nuGetPublisher()
        success = publisher.publish(
            apiKey=apiKey or "",
            version=args.version,
            increment=args.increment,
            dryRun=args.dry_run
        )
        
        if success:
            print("\n🎉 Publish process completed successfully!")
            sys.exit(0)
        else:
            print("\n❌ Publish process failed!")
            sys.exit(1)
    
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
